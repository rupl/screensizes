<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <title>screensizes</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <meta name="author" content="Chris Ruppel">
    <meta name="description" content="See how many different screen sizes view the web.">
    <link rel="stylesheet" media="all" href="/css/style.css">
  </head>
  <body>
    <div id="welcome">
      <p>Watch this page a while.</p>
      <p>You're seeing the screen sizes of all visitors in real-time as they arrive.</p>
    </div>
    <div id="more-info">
      <p>This page uses <a href="https://socket.io/">web sockets</a> to broadcast your screen size to every other visitor in real-time.</p>
      <p>The result is a visual representation of the traffic that's hitting the site.</p>
    </div>

    <!-- screens will be populated here -->
    <div id="canvas"></div>

    <button class="huh"><span class="element-invisible">what is this site about?</span></button>
    <p class="colophon"><a href="https://github.com/rupl/screensizes">an experiment</a> by <a href="https://chrisruppel.com">rupl</a></p>

    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/client.js"></script>

    {?VISUALIZE_SELF}
      {!
        VISUALIZE_SELF flag allows screensizes.org to visualize its own traffic.
        You probably don't need to enable it if you're setting this up on your site.
      !}
      <script>
        /**
         * Add a new screen on all clients. It doesn't immediately add a shape
         * to your DOM, the 'add' listener in client.js handles that part.
         */
        window.onload = broadcast;

        /**
         * Broadcast on resize too. It's purty.
         */
        window.onresize = debounce(broadcast, 50);

        /**
         * Broadcast
         */
        function broadcast() {
          socket.emit('add', {
            w: window.innerWidth,
            h: window.innerHeight
          });
        }

        /**
         * Debounce (from underscore.js)
         */
        function debounce(func, wait, immediate) {
          var timeout;
          return function() {
            var context = this, args = arguments;
            var later = function() {
              timeout = null;
              if (!immediate) func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
          };
        };
      </script>
    {/VISUALIZE_SELF}

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

      ga('create', '{GA}', 'auto');
      ga('send', 'pageview');
    </script>
  </body>
</html>
